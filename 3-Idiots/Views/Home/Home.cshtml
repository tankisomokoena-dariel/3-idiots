@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}



<!DOCTYPE html>
<html lang="en">
<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="~/Scripts/speech-to-text/speech_to_text.js" type="text/javascript"></script>


    <script>
        window.addEventListener("load", onloadfunction);
    </script>

    <script src="https://code.jquery.com/jquery-3.4.1.js"></script>

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.12.0/css/all.css">

    <title>Dariel</title>
    <link rel="shortcut icon" href="https://www.dariel.co.za/wp-content/uploads/2019/08/cropped-Dariel-Swoosh-32x32.png">

    <style>


        html, body {
            overflow: hidden;
            padding: 0;
            margin: 0;
            height: 100%;
            background-image: url('../Content/images/background.jpg');
            background-attachment: fixed;
            background-repeat: no-repeat;
            background-size: cover;
        }

        i {
            font: italic;
        }

        .container {
            height: 100%;
            margin-top: 100px;
        }

        .search {
            width: 80%;
            height: 50%;
            right: 50px;
        }

        .row {
            background: white;
            border-radius: 30px;
            box-shadow: 18px 18px 22px black;
            position: static;
        }

        img {
            border-top-left-radius: 30px;
            border-bottom-left-radius: 30px;
            border-top-right-radius: 30px;
            border-bottom-right-radius: 30px;
        }

        .logo-img {
            position: relative;
            width: 50%;
            left: 20%;
        }

        .form-control {
            height: 50px;
            width: 80%;
            float: left;
        }

        .search-btn {
            border: none;
            /*float: right;*/
            outline: none;
            height: 50px;
            width: 10%;
            background-color: gray;
            /*color: white;*/
            border-top-left-radius: 4px;
            border-bottom-left-radius: 4px;
            border-top-right-radius: 4px;
            border-bottom-right-radius: 4px;
        }

        .rec-btn {
            border: none;
            /*float: right;*/
            outline: none;
            height: 50px;
            width: 10%;
            background-color: gray;
            /*color: white;*/
            border-top-right-radius: 4px;
            border-bottom-right-radius: 4px;
            border-top-left-radius: 4px;
            border-bottom-left-radius: 4px;
        }

        .search-btn:hover {
            background: white;
            border: 1px solid;
            color: black;
        }

        .rec-btn:hover {
            background: white;
            border: 1px solid;
            color: black;
        }

        .alert {
            background: #cdcaca;
            padding: 20px 40px;
            min-width: 420px;
            height: 80px;
            position: fixed;
            text-align: center;
            right: 550px;
            top: 130px;
            overflow: hidden;
            border-radius: 5px;
            border-left: 8px solid black;
            cursor: pointer;
        }

            /*.alert .close-btn {
                position: absolute;
                right: 0px;
                top: 50px;
                transform: translate(-50%);
                background: black;
                padding: 20px 18px;
                cursor: pointer;
            }*/

            .alert.hide {
                display: none;
            }

        @@keyframes show_slide {
            0% {
                transform: translateX(100%);
            }

            40% {
                transform: translateX(-10%)
            }

            80% {
                transform: translateY(0%)
            }

            100% {
                transform: translateY(-10%)
            }
        }

        /*.close-btn:hover{
            cursor: pointer;
        }*/

        .close-btn .fa-times {
            color: black;
            font-size: 22px;
            line-height: 40px;
        }
    </style>
</head>


<body>


    <div class="container">
        <div class="row no-gutters align-items-center justify-content-center ">

            <div class="alert hide">
                <span> <b>You can search for an Expert, Answer or an Article.</b></span>
            </div>
            <div class="col-lg-7 px-5 pt-2">
                <div class="logo-img">
                    <img src="https://www.dariel.co.za/wp-content/uploads/2019/08/cropped-dariel-logo-Fullcolour-300x100.png" class="img-fluid" />
                </div>
                @{

                    var questions = ViewBag.Questions;
                }

                @using (Html.BeginForm("Search", "QandA", FormMethod.Post))
                {
                    if (ViewBag.ResponseMessage != null)
                    {
                        <div style="color:red; text-align:center;">
                            <h5>@ViewBag.ResponseMessage</h5>
                        </div>
                    }
                    <div class="form-row ml-5">
                        <div class="search ml-5 mr-5 mb-5">
                            <input type="text" id="speech_to_text" name="search" autocomplete="off" placeholder="Search" class="form-control m-1">

                            <button type="submit" class="search-btn m-1">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                                    <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" />
                                </svg>
                            </button>

                            <button type="button" id="rec-id" class="rec-btn m-1" onclick="recognize(true);">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-mic" viewBox="0 0 16 16">
                                    <path d="M3.5 6.5A.5.5 0 0 1 4 7v1a4 4 0 0 0 8 0V7a.5.5 0 0 1 1 0v1a5 5 0 0 1-4.5 4.975V15h3a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1h3v-2.025A5 5 0 0 1 3 8V7a.5.5 0 0 1 .5-.5z" />
                                    <path d="M10 8a2 2 0 1 1-4 0V3a2 2 0 1 1 4 0v5zM8 0a3 3 0 0 0-3 3v5a3 3 0 0 0 6 0V3a3 3 0 0 0-3-3z" />
                                </svg>
                            </button>


                        </div>
                    </div>
                }
            </div>
        </div>
    </div>




    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
    <script>

        const flag = localStorage.getItem("Run");
        var secs = 0;
        var id = setInterval(function () {
            secs++; console.log(secs);

            if (secs > 1 && secs < 3 && flag == "1") {
                $('.alert').removeClass("hide");
                $('.alert').addClass("show");
            }
            if (secs > 6) {
                localStorage.setItem("Run", "0");
                $('.alert').addClass("hide");
                $('.alert').removeClass("show");
            }
        }, 1000);

    </script>

    <script type="text/javascript">

        var suggestions = JSON.parse('@Html.Raw(ViewBag.Questions)'); // change Model.Address


        function autocomplete(inp, arr) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function (e) {
        var a, b, i, val = this.value;
        /*close any already open lists of autocompleted values*/
        closeAllLists();
        if (!val) { return false; }
        currentFocus = -1;
        /*create a DIV element that will contain the items (values):*/
        a = document.createElement("DIV");
        a.setAttribute("id", this.id + "autocomplete-list");
        a.setAttribute("class", "autocomplete-items");
        /*append the DIV element as a child of the autocomplete container:*/
        this.parentNode.appendChild(a);
        /*for each item in the array...*/
        for (i = 0; i < arr.length; i++) {
        /*check if the item includes same letters as the text field value:*/
        if (arr[i].toLowerCase().includes(val.toLowerCase())) {
        /*create a DIV element for each matching element:*/
        b = document.createElement("DIV");
        /*make the matching letters bold:*/
        b.innerHTML = boldString(arr[i],val);
        /*insert a input field that will hold the current array item's value:*/
        b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
        /*execute a function when someone clicks on the item value (DIV element):*/
        b.addEventListener("click", function (e) {
        /*insert the value for the autocomplete text field:*/
        inp.value = this.getElementsByTagName("input")[0].value;
        /*close the list of autocompleted values,
        (or any other open lists of autocompleted values:*/
        closeAllLists();
        });
        a.appendChild(b);
        }
        }
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function (e) {
        var x = document.getElementById(this.id + "autocomplete-list");
        if (x) x = x.getElementsByTagName("div");
        if (e.keyCode == 40) {
        /*If the arrow DOWN key is pressed,
        increase the currentFocus variable:*/
        currentFocus++;
        /*and and make the current item more visible:*/
        addActive(x);
        } else if (e.keyCode == 38) { //up
        /*If the arrow UP key is pressed,
        decrease the currentFocus variable:*/
        currentFocus--;
        /*and and make the current item more visible:*/
        addActive(x);
        } else if (e.keyCode == 13) {
        if (currentFocus > -1) {
        /*and simulate a click on the "active" item:*/
        if (x) x[currentFocus].click();
        }
        }
        });
        function addActive(x) {
        /*a function to classify an item as "active":*/
        if (!x) return false;
        /*start by removing the "active" class on all items:*/
        removeActive(x);
        if (currentFocus >= x.length) currentFocus = 0;
        if (currentFocus < 0) currentFocus = (x.length - 1);
        /*add class "autocomplete-active":*/
        x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
        /*a function to remove the "active" class from all autocomplete items:*/
        for (var i = 0; i < x.length; i++) {
        x[i].classList.remove("autocomplete-active");
        }
        }
        function closeAllLists(elmnt) {
        /*close all autocomplete lists in the document,
        except the one passed as an argument:*/
        var x = document.getElementsByClassName("autocomplete-items");
        for (var i = 0; i < x.length; i++) {
        if (elmnt != x[i] && elmnt != inp) {
        x[i].parentNode.removeChild(x[i]);
        }
        }
        }
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
        closeAllLists(e.target);
        });
        }

        autocomplete(document.getElementById("speech_to_text"), suggestions);

        function boldString(str, substr) {
            var strRegExp = new RegExp(substr, 'g');
            return str.toLowerCase().replace(strRegExp, '<b>' + substr + '</b>');
        }

    </script>


</body>
</html>
